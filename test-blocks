#!/usr/bin/perl

use strict;
use warnings;

# Define some example data (add more as needed)
my @data = (
    { type => "A", value => 15 },
    { type => "B", value => 8 },
    { type => "C", value => 22 },
    { type => "D", value => 5 },
    { type => "E", value => 12 },
    { type => "F", value => 18 },
    { type => "G", value => 25 },
    { type => "H", value => 3 },
    { type => "I", value => 10 },
    { type => "J", value => 20 },
);

# Define characters for different types
my @characters = (
    '█',    # Full block
    '▓',    # Heavy shading
    '▒',    # Medium shading
    '░',    # Light shading
    '▪',    # Black Square
    '▫',    # White Square
    '☰',    # Menu
    '•',    # Bullet Point
    '■',     #Black Very Heavy
    '□',     # White square
);

# Maximum value for scaling (adjust as needed)
my $max_value = 25;

# Function to scale the count
sub scale_count {
    my ($value) = @_;
    return int(($value / $max_value) * 50);  # Scale to a max of 50 characters
}

# Colors
my %colors = (
    'red'   => "\033[0;31m",  # Red
    'green' => "\033[0;32m",  # Green
    'blue'  => "\033[0;34m",  # Blue
    'NC'    => "\033[0m"       # Reset
);

# Loop through the data and print the bars
foreach my $item (@data) {
    my $type         = $item->{type};
    my $value        = $item->{value};
    my $scaled_count = scale_count($value);

    # Cycle through characters if there are more data types than characters
    my $character = $characters[ (ord($type) - ord('A')) % scalar @characters ];

    my $color = $colors{'red'};

    # Color codes based on which value.
    if ($type eq 'A') { $color = $colors{'green'} };
    if ($type eq 'B') { $color = $colors{'blue'} };

    my $bar = $character x $scaled_count;    # Repeat the character to create the bar

    print "$type: $color$bar$colors{'NC'} ($value)\n";
}

