#!/usr/bin/perl
use strict;
use warnings;
use POSIX qw(strftime);
use Time::Piece;
use DateTime;
use Term::ReadKey;
use Getopt::Long;
use Term::ANSIColor;
use Time::HiRes qw(gettimeofday tv_interval);
use Proc::ProcessTable;

# Start time
my $start_time = [gettimeofday];

# Configuration
my $version_number = "0.1.13";
my ( $bucket_size_minutes, $bucket_size_seconds, $print_seconds, $print_milliseconds, $print_version, $omit_empty, $omit_summary ) = 0;
my ( $current_memory_usage, $max_memory_usage, $end_time, $elapsed ) = ( 0, 0, 0, 0 );
my ( %log_counts, %category_totals, %log_analysis, %log_messages );	# this is where the counts of log entries are tallied across the time buckets
my $max_log_message_length = 150;					# used to define the maximum key length of the log message bucket counts
my $top_n_messages = 10;
my $total_lines_read = 0;
my $total_lines_included = 0;
my $total_lines_highlighted = 0;
my $legend_length = 0;
my $range_start = "";
my $range_end = "";
my $range_start_epoch = 0;
my $range_end_epoch = 0;
my %range_epoch = ( 'start' => 0, 'end' => 2521843200 );
my %range;
my $output_timestamp_format = "%Y-%m-%d %H:%M";
#my( $output_timestamp_min ) = DateTime->from_epoch( epoch => 1678886400 );
#my( $output_timestamp_min, $output_timestamp_max );
my $output_timestamp_min = 0;
my $output_timestamp_max = 0;
my( $exclude_regex, $include_regex, $highlight_regex );
my $pause_output = 0;
my $hide_values = 0;
my @in_files;
my ($terminal_width, $terminal_height) = GetTerminalSize();
my @log_levels = qw(ERROR-HL ERROR WARN-HL WARN INFO-HL INFO DEBUG-HL DEBUG TRACE-HL TRACE 5xx-HL 5xx 4xx-HL 4xx 3xx-HL 3xx 2xx-HL 2xx 1xx-HL 1xx empty );		# Define log bucket printing order
my %blocks = (
    'A' => '█',    # Full block
    'B' => '▓',    # Heavy shading
    'C' => '▒',    # Medium shading
    'D' => '░',    # Light shading
    'E' => '▪',    # Black Square
    'F' => '▫',    # White Square
    'G' => '☰',    # Menu
    'H' => '•',    # Bullet Point
    'I' => '■',    # Black Very Heavy
    'J' => '□'     # White square
);
my $default_chart_block = "A";

# TO DO:
# - add a summary table at the end showing totals in the various buckets (start, end time, total duration in time of logs, average logs per minute, second, size of the file, lines omitted/didn't match)
# - add a feature providing the Top X messages in the summary - would need to be turned on (takes memory), could only apply to more complex log analysis where full pattern is known (see twxsummarize)
# - add a feature to parse GC logs including their freed space and pause duration, and common log messages could include the type of GC
# - adapt access log format to support top messages
# - context detection and removal from log lines (maybe use bloom filter) - seek names in other lines, and then match on that in log lines and substitute the text (error in entity name Thing1)
# - add feature to auto-calculate time window bucket based on terminal height and min and max time range in file (this would be based on previous file reads, or better filesize)
# - add feature to calculate mean, standard deviation, Coefficient of Variation (%), 90/95th percentile for duration including lines
# - add feature to add a right side table indicating statistical calculations when in duration measurement mode 

# NOT PRIORITY BACKLOG
# - add a feature to include/exclude HTTP status codes which would need to be converted to RegEx as 4xx isn't going to be found
# - add a feature to allow for grouping of various other log categories like ThreadPool or Object context (instead of errors)
# - performance improvement: leverage a temp file with cached file stats (log start/end times, num lines, ...) to start/stop reading the file when provided start/end time ranges based on guesses around filesize
# - support for live tailing

## LOG STRUCTURES ##
# RAC client: [2025-02-04T12:06:22.784] [TRACE] MessageStream - handling data from GAS with chunk size: 88
# TWX logs: 2025-02-04 12:05:57.481+0000 [L: DEBUG] [O: c.t.p.p.StreamEntryProcessor] [I: ] [U: ] [S: ] [P: ] [T: pool-6-thread-3] Stream Entry Block Size Threshold Reached...
# Tomcat access logs: 10.224.212.63 - - [02/Feb/2025:00:00:11 +0000] "GET /Thingworx/Metrics?x-thingworx-session=false HTTP/1.1" 200 17626 295

my %colors = (
    'ERROR' => "\033[0;31m",
    'WARN'  => "\033[0;33m",
    'INFO'  => "\033[0;32m",
    'DEBUG' => "\033[0;34m",
    'TRACE' => "\033[0;35m",
    '1xx'  => "\033[0;34m",
    '2xx'  => "\033[0;32m",
    '3xx'  => "\033[0;35m",
    '4xx'  => "\033[0;33m",
    '5xx'  => "\033[0;31m",
    'NC'    => "\033[0m",
    'black' => "\033[30m\033[49m",
    'red' => "\033[31m\033[49m",
    'green' => "\033[32m\033[49m",
    'yellow' => "\033[33m\033[49m",
    'blue' => "\033[34m\033[49m",
    'magenta' => "\033[35m\033[49m",
    'cyan' => "\033[36m\033[49m",
    'white' => "\033[36m\033[49m",
    'bright-black' => "\033[90m\033[109m",
    'bright-red' => "\033[91m\033[109m",
    'bright-green' => "\033[92m\033[109m",
    'bright-yellow' => "\033[93m\033[109m",
    'bright-blue' => "\033[94m\033[109m",
    'bright-magenta' => "\033[95m\033[109m",
    'bright-cyan' => "\033[96m\033[109m",
    'bright-white' => "\033[97m\033[109m",
    'black-underline' => "\033[4;30m",
    'red-underline' => "\033[4;31m",
    'green-underline' => "\033[4;32m",
    'yellow-underline' => "\033[4;33m",
    'blue-underline' => "\033[4;34m",
    'magenta-underline' => "\033[4;35m",
    'cyan-underline' => "\033[4;36m",
    'white-underline' => "\033[4;37m"
);

# ANSI code for yellow background
my $white_fg  = "\033[1;37m"; # Bright White Foreground
#my $yellow_bg = "\033[43m";  # Yellow background
my $yellow_bg = "\033[48;5;229m";  # Very pale yellow background
#my $yellow_bg = "\033[48;5;222m";  # Light gold background
#my $yellow_bg = "\033[48;5;216m";  # Pastel yellow background
my $reset_all    = "\033[0m";  # Reset ALL attributes

# Create new keys with -HL and yellow background
foreach my $key (keys %colors) {
    next if $key eq 'NC';  # Skip NC
    my $new_key = "$key-HL";
    #$colors{$new_key} = "$colors{$key}$yellow_bg";			# Apply a yellow background on top of the existing FG color
    
   my $original_fg_color = $colors{$key}; # Get original foreground

    # Extract the original colour code from the FG code
    $original_fg_color =~ s/^\e\[(.*?)m/$1/g;

    my $bg_color_256;
    if ($original_fg_color eq "0;31") {    # Red
        $bg_color_256 = "196";            # 256-color code for Red
    } elsif ($original_fg_color eq "0;33") { # Yellow
        $bg_color_256 = "226";            # 256-color code for Yellow
    } elsif ($original_fg_color eq "0;32") { # Green
        $bg_color_256 = "46";             # 256-color code for Green
    } elsif ($original_fg_color eq "0;34") { # Blue
        $bg_color_256 = "21";             # 256-color code for Blue
    } elsif ($original_fg_color eq "0;35") { # Magenta
        $bg_color_256 = "201";            # 256-color code for Magenta
    } else {
        $bg_color_256 = "0";              # Black background as default
    }

    #$colors{$new_key} = "\033[48;5;${bg_color_256}m${white_fg}";
    $colors{$new_key} = "$colors{$key}\033[48;5;${bg_color_256}m";
  #  print "$original_fg_color\n";
}

#foreach my $key (keys %colors){
#    print "Testing: $key\n";
#    print "$colors{$key}This is $key with \$colors{'NC'} $reset_all\n";
#}


## SUBS ##

sub print_title {
    my $title = <<"END";
\033[0;37m
\033[90m\033[109m
──────────────────────────────────────────────────────────────────────────────────────────────

   ,:: ltl ::' log timeline  --  by Greg Eva // geva\@ptc.com // gregeva\@gmail.com

──────────────────────────────────────────────────────────────────────────────────────────────
\033[0m
END
    print $title;
    return;
}

sub print_usage {
    my ( $error_reason ) = @_;
    print "Usage: $0 [--bucket-size|-bs <time block>] [--pause|-p] [--hide-values|-h] [--start|-st <YYYY-MM-DD HH:MM:SS>] [--end|-et <HH:MM>] [--exlude|-e <RegEx>] [--include|-i <RegEx>] [--highlight|-h <RegEx>] [--seconds|-s] [--milliseconds|-ms] [--omit-empty|-oe] [--omit-summary|-os] [--version|-v] <file1> <file2> ...\n";
    print "\n  Error: $error_reason\n";
    return;
}

sub print_version {
    print "Version: $version_number\n\n";
    return;
}

# Function to get current memory usage
sub get_memory_usage {
    my $t = Proc::ProcessTable->new();
    my ($memory_usage) = map { $_->rss } grep { $_->pid == $$ } @{$t->table};
    return $memory_usage;
}

sub format_bytes {
    my ($value, $unit) = @_;
    my %units = (
        'B'  => 1,
        'kB' => 1024,
        'MB' => 1024**2,
        'GB' => 1024**3,
        'TB' => 1024**4,
    );

    # Convert input value to bytes
    my $bytes = $value * $units{$unit};

    # Determine the most relevant unit
    my @unit_order = ('B', 'kB', 'MB', 'GB', 'TB');
    my $formatted_value = $bytes;
    my $formatted_unit = 'B';

    foreach my $u (@unit_order) {
        if ($bytes >= $units{$u}) {
            $formatted_value = $bytes / $units{$u};
            $formatted_unit = $u;
        } else {
            last;
        }
    }

    # Format the value to 1 decimal place
    $formatted_value = sprintf("%.1f", $formatted_value);

    return "$formatted_value $formatted_unit";
}

sub format_time {
    my ($value, $unit, $format) = @_;
    my %units = (
        'us' => 1,                # Microseconds
        'ms' => 1000,             # Milliseconds
        's'  => 1000000,          # Seconds
        'm'  => 60 * 1000000,     # Minutes
        'h'  => 60 * 60 * 1000000, # Hours
        'D'  => 24 * 60 * 60 * 1000000, # Days
    );

    my %unit_names = (
        'us' => { short => 'us', medium => 'microsec', long => 'microseconds' },
        'ms' => { short => 'ms', medium => 'millisec', long => 'milliseconds' },
        's'  => { short => 's',  medium => 'sec',      long => 'seconds' },
        'm'  => { short => 'm',  medium => 'min',      long => 'minutes' },
        'h'  => { short => 'h',  medium => 'hr',       long => 'hours' },
        'D'  => { short => 'd',  medium => 'day',      long => 'days' },
    );

    $format = "short" if !defined $format;

    # Convert input value to microseconds
    my $microseconds = $value * $units{$unit};

    # Determine the most relevant unit
    my @unit_order = ('us', 'ms', 's', 'm', 'h', 'D');
    my $formatted_value = $microseconds;
    my $formatted_unit = 'us';

    foreach my $u (@unit_order) {
        if ($microseconds >= $units{$u}) {
            $formatted_value = $microseconds / $units{$u};
            $formatted_unit = $u;
        } else {
            last;
        }
    }

    # Format the value to 1 decimal place
    $formatted_value = sprintf("%.1f", $formatted_value);

    # Get the appropriate unit name based on the format
    my $unit_name = $unit_names{$formatted_unit}{$format};

    return "$formatted_value $unit_name";
}

sub adapt_to_command_line_options {
    # Get command-line options
    GetOptions(
        'bucket-size|bs=i' => \$bucket_size_minutes,
        'pause|p' => \$pause_output,
        'hide-values|hv' => \$hide_values,
        'start|st=s' => \$range_start,
        'end|et=s' => \$range_end,
        'exclude|e=s' => \$exclude_regex,
        'include|i=s' => \$include_regex,
        'highlight|h=s' => \$highlight_regex,
        'omit-empty|oe' => \$omit_empty,
        'omit-summary|os' => \$omit_summary,
        'seconds|s' => \$print_seconds,
        'milliseconds|ms' => \$print_milliseconds,
        'version|v' => \$print_version
    ) or die print_usage( "required options not provided" ); 

    $range{'start'} = $range_start if defined( $range_start );
    $range{'end'} = $range_end if defined(  $range_end );

    if( $print_version ) {
        print_version();
        exit;
    }

    # Ensure at least one file is provided
    @in_files = @ARGV;
    die print_usage( "unable to open any files" ) unless @in_files;

# Should include cleaner handling of possible problems with entering command line options
#eval {
#    die "Something bad happened";
#};
#if ($@) {
#    # Handle the error here
#    print "Caught the error: $@";
#}
    $output_timestamp_format .= ":%S" if $print_seconds || $print_milliseconds;
    #$bucket_size_seconds = $print_seconds ? $bucket_size_minutes : $bucket_size_minutes * 60;		# if they say they want milliseconds, we're going to assume that their bucket sizes are in seconds instead
    if( $print_seconds ) {
        $bucket_size_seconds = $bucket_size_minutes;
    } elsif( $print_milliseconds ) {
        $bucket_size_seconds = $bucket_size_minutes / 1000;
    } else {
        $bucket_size_seconds = $bucket_size_minutes * 60;
    }

    return;
}

# Parse various possible formats for input of start and end times and set associated filter variables
sub calculate_start_end_filter_timestamps {
    my ( $log_time ) = @_;
    my $log_date = $log_time->epoch() - ( $log_time->hour * ( 60 * 60 ) + $log_time->minute * 60 + $log_time->second );

    foreach my $key (keys %range) {
        my $value = $range{$key};  # Get the value (either $range_start or $range_end)
        next unless length( $range{$key} ) > 0;
        my $epoch_value;  # Variable to store the epoch time

        # Convert timestamp to epoch seconds using Time::Piece -- WARNING -- use of strptime can cause timezone problems, it appears to work here as I've manually set TZ to UTC on input
        if ( $value =~ /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}/ ) {
            $epoch_value = Time::Piece->strptime( $value, "%Y-%m-%d %H:%M:%S" )->epoch;
        } elsif ( $value =~ /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}/ ) {
            $epoch_value = Time::Piece->strptime( $value, "%Y-%m-%d %H:%M" )->epoch;
        } elsif ( $value =~ /^\d{4}-\d{2}-\d{2}/ ) {
            $epoch_value = Time::Piece->strptime( $value, "%Y-%m-%d" )->epoch;
        } elsif ( $value =~ /^\d{2}:\d{2}:\d{2}/ ) {
            $epoch_value = $log_date + Time::Piece->strptime( $value, "%H:%M:%S" )->epoch;
        } elsif ( $value =~ /^\d{2}:\d{2}/ ) {
            $epoch_value = $log_date + Time::Piece->strptime( $value, "%H:%M" )->epoch;
        } else {
            print "Warning: unhandled date/time format - option not taken into account\n";
        }

        #print "Epoch value in seconds: $epoch_value\n";
        $range_epoch{$key} = $epoch_value if defined( $epoch_value );  # Store the epoch value in the hash
    }
    return 1;
}

sub adapt_to_terminal_settings {
    $terminal_width //= 80; # Default to 80 if terminal width cannot be determined
    $terminal_height //= 24; # Default to 24 if terminal height cannot be determined

    # Auto-adjust the bucket size based on the terminal height (larger terminal can handle more rows)
    if( $terminal_height <= 24 ) {
        $bucket_size_minutes = 60;
    } elsif( $terminal_height <= 45 ) {
        $bucket_size_minutes = 30;
    } elsif( $terminal_height <= 65 ) {
        $bucket_size_minutes = 10;
    } elsif( $terminal_height <= 85 ) {
        $bucket_size_minutes = 5;
    } elsif( $terminal_height > 85 ) {
        $bucket_size_minutes = 1;
    } else {
        $bucket_size_minutes = 60;
    }
    #print "Terminal is: $terminal_width x $terminal_height -- Bucket size: $bucket_size_minutes\n";

    $max_log_message_length = $terminal_width - 30;		# this is the max that we can print without wrapping, depends on the summary table width, and terminal width 
    return;
}

sub pause_for_keypress {
    my ($prompt) = @_;  # Get the optional prompt message
    $prompt = "Press any key to continue (or Q to quit)..." unless defined $prompt;
    print "\033[0;44m$prompt\033[0m";

    ReadMode 4;  # Turn off line buffering
    my $key = ReadKey(0);
    ReadMode 0;  # Restore normal input mode

    if (defined $key) {
        if ($key eq "q" || $key eq "Q") {
            print "\r";
            print " " x length( $prompt );
            print "\r\033[0;35mExiting program.\033[0m\n";
            exit 0;
        } else {
            print "\r";
            print " " x length( $prompt );
            print "\r";
            return 1;  # Return a value indicating "continue"
        }
    } else {
        print "\r";
        print " " x length( $prompt );
        print "\r";
        return 1;
    }
}

# Parse logs, bucket by time, and count log levels
sub read_and_process_logs {
    # BUG: this should be able to take multiple files as inputs using * but it doesn't work, same for including multiple files
    foreach my $in_file (@in_files) {
        open my $fh, '<', $in_file or die "Cannot open file: $in_file";
        my $line_number = 0;
        my $range_filter_initialized = 0;
        my %month_map = ( Jan => 1, Feb => 2, Mar => 3, Apr => 4, May => 5, Jun => 6, Jul => 7, Aug => 8, Sep => 9, Oct => 10, Nov => 11, Dec => 12 );

        while (<$fh>) {
            $line_number++;
            my ( $timestamp_str, $log_level, $category_bucket, $object, $instance, $user, $platform, $thread, $message ) = ("") x 9;
            my ( $is_line_match, $is_access_log, $match_type, $status_code, $bytes, $duration ) = 0;
            my $timestamp;
            $total_lines_read++;

            if ($line_number % 997 == 0) {	# only print processing status update every X lines processed
                printf("\rProcessing line %d in file %s", $line_number, $in_file);
                $| = 1; # Flush output
            }

            if ($line_number % 100000 == 0) {	# only collect memory in use around every 100000 lines processed
                $current_memory_usage = get_memory_usage();								# track maximum memory usage
                if ($current_memory_usage > $max_memory_usage) {
                    $max_memory_usage = $current_memory_usage;
                }
            }

            # ORIGINAL #if (my ($timestamp_str, $log_level) = $_ =~ /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\.\d{3}\+\d{4} \[L: ([^\]]*)\]/) {

#            if (my ($timestamp_str, $log_level) = $_ =~ /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\.\d{3}\+\d{4} \[L: ([^\]]*)\]/) {
#           #if( $_ = /^[\[]?(?<timestamp_str>\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2})\.?(?<milliseconds>\d{3})?.*? \[[L: ]*(?<log_level>[^\]]*)\]/ ) {
#                $timestamp_str =~ tr/T/ /;
#                my $category_bucket = $log_level;
#                # Convert timestamp to epoch seconds using Time::Piece
#    #            my $timestamp = Time::Piece->strptime($timestamp_str, "%Y-%m-%d %H:%M:%S")->epoch;
#                my $timestamp = DateTime->new(
#                    year      => substr($timestamp_str, 0, 4),
#                    month     => substr($timestamp_str, 5, 2),
#                    day       => substr($timestamp_str, 8, 2),
#                    hour      => substr($timestamp_str, 11, 2),
#                    minute    => substr($timestamp_str, 14, 2),
#                    second    => substr($timestamp_str, 17, 2),
#                    time_zone => 'UTC',
#                );

            if ( ($timestamp_str, $category_bucket, $object, $instance, $user, undef, $platform, $thread, $message ) = $_ =~ /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\+\d{4} \[L: ([^\]]*)\] \[O: ([^\]]*)] \[I: ([^\]]*)] \[U: ([^\]]*)] \[S: ([^\]]*)] \[P: ([^\]]*)] \[T: ([^\]]*)] (.*)/) {
                $is_line_match = 1;
                $match_type = 1;			# this is matching ThingWorx standard log format 2025-02-04 12:05:57.481+0000 [L: DEBUG] 
                $thread =~ s/(.*)-\d+$/$1/;
            } elsif ( ($timestamp_str, $category_bucket) = $_ =~ /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3})\+\d{4} \[L: ([^\]]*)\]/) {
                $is_line_match = 1;
                $match_type = 1;			# this is matching ThingWorx standard log format 2025-02-04 12:05:57.481+0000 [L: DEBUG] 
            } elsif ( ($timestamp_str, $category_bucket ) = $_ =~ /^[\[]?(\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}\.\d{3}).*? \[[L: ]*([^\]]*)\]/ ) {
                $is_line_match = 1;
                $match_type = 2;			# this is matching RAC client log format [2025-02-04T12:06:22.784] [TRACE]
                $timestamp_str =~ tr/T/ /;
            } elsif ( (undef, $timestamp_str, $message, $category_bucket, $bytes, $duration) = $_ =~ /^(.+? ){3}[\[]([^\]]+)[\]] "([^"]+)" (\d{3}) (\d+) (\d+)/ ) {
                $is_line_match = 1;
                $match_type = 3;			# this is matching Tomcat access log format with service execution time 43.52.82.172 - - [02/Feb/2025:00:00:11 +0000] "GET /Thingworx/Metrics?x-thingworx-session=false HTTP/1.1" 200 17626 295
                $is_access_log = 1;
                $status_code = $category_bucket;
                $category_bucket =~ s/(\d)\d{2}/$1xx/;	# bucket HTTP status codes into their primary families
                $timestamp_str =~ s/ \+\d{4}$//;	# chop off the timezone offset
                #$message =~ s/\?.+$//;			# chop off the query string from the URI
#print "$message -- $_";
            } elsif ( (undef, $timestamp_str, $message, $category_bucket, $bytes) = $_ =~ /^(.+? ){3}[\[]([^\]]+)[\]] "([^"]+)" (\d{3}) (\d+)/ ) {
                $is_line_match = 1;
                $match_type = 4;			# this is matching Tomcat access log format with service execution time 43.52.82.172 - - [02/Feb/2025:00:00:11 +0000] "GET /Thingworx/Metrics?x-thingworx-session=false HTTP/1.1" 200 17626
                					# this is matching Nginx ingress access log format 3.133.31.181 - - [18/Nov/2024:14:19:55 +0000] "GET / HTTP/1.1" 404 431 "-" "WizDynamicScanner/1.0"
                $is_access_log = 1;
                $status_code = $category_bucket;
                $category_bucket =~ s/(\d)\d{2}/$1xx/;	# bucket HTTP status codes into their primary families
                $timestamp_str =~ s/ \+\d{4}$//;	# chop off the timezone offset
                #$message =~ s/\?.+$//;			# chop off the query string from the URI
            } elsif ( ($timestamp_str, $category_bucket) = $_ =~ /^{"\@timestamp":"([^"]*).*"level":"([^"]*)/ ) {
                $is_line_match = 1;
                $match_type = 5;			# this matches Connection Server JSON formatted logs : {"@timestamp":"2025-02-02T21:03:06.725+00:00","@version":1,"message":"Error encountered, closing WebSocket: endpointId=2608459","logger_name":"com.thingworx.connectionserver.alwayson.AbstractClientEndpoint","thread_name":"vert.x-eventloop-thread-16","level":"WARN","level_value":30000,"stack_trace":"io.vertx.core.http.HttpClosedException: Connection was closed\n"}
                $timestamp_str =~ s/\+\d{2}:\d{2}$//;	# chop off the timezone offset
                $timestamp_str =~ tr/T/ /;
            }

#print "Thread: $thread   Object: $object   Message: $message\n";

            #print "\033[0;32m[$timestamp_str|$category_bucket] [$is_line_match/$match_type] \033[0m$_";
            #$| = 1; # Flush output

            if( $is_line_match ) {
                unless (grep { $_ eq $category_bucket } @log_levels) {				# this condition importantly only continues if the read/parsed log category is one of the ones defined
                    next;
                } elsif( $match_type == 1 || $match_type == 2 || $match_type == 5 ) {
                    $timestamp = DateTime->new(
                        year      => substr($timestamp_str, 0, 4),
                        month     => substr($timestamp_str, 5, 2),
                        day       => substr($timestamp_str, 8, 2),
                        hour      => substr($timestamp_str, 11, 2),
                        minute    => substr($timestamp_str, 14, 2),
                        second    => substr($timestamp_str, 17, 2),
                        time_zone => 'UTC',
                    );
                } elsif( $match_type == 3 || $match_type == 4 ) {
                    my ($day, $month_str, $year, $hour, $minute, $second) = $timestamp_str =~ m/(\d{2})\/([A-Za-z]+)\/(\d{4}):(\d{2}):(\d{2}):(\d{2})/;
                    my $month = $month_map{$month_str};
                    $timestamp = DateTime->new(
                        year      => $year,
                        month     => $month,
                        day       => $day,
                        hour      => $hour,
                        minute    => $minute,
                        second    => $second,
                        time_zone => 'UTC',
                    );

#                    print "\033[0;35m[%d]\033[0m", $timestamp->epoch();
#                    $| = 1; # Flush output
                }

                $range_filter_initialized = calculate_start_end_filter_timestamps( $timestamp ) unless $range_filter_initialized;

                # a number of conditions determine if this read row should be skipped
                next if( $timestamp->epoch() < $range_epoch{'start'} || $timestamp->epoch() >= $range_epoch{'end'} );
                next if( defined( $exclude_regex ) && /$exclude_regex/ );
                next if( defined( $include_regex ) && !/$include_regex/ );

                # determine if this line should be highlighted
                $category_bucket .= "-HL" if( defined( $highlight_regex ) && /$highlight_regex/ );

                # sets earliest and latest timestamp values being displayed (after the range filtering selection)
                $output_timestamp_min = $timestamp->epoch() if $output_timestamp_min == 0 || $output_timestamp_min > $timestamp->epoch();
                $output_timestamp_max = $timestamp->epoch() if $output_timestamp_max == 0 || $output_timestamp_max < $timestamp->epoch();

                my $bucket = int($timestamp->epoch() / $bucket_size_seconds) * $bucket_size_seconds;

                $log_counts{$bucket}{$category_bucket}{count}++;

                if( defined( $message ) ) {
                    my $log_key = "";
                    my $log_level = $category_bucket;
                    $log_level =~ s/-HL$//;

                    if( defined($thread) && defined($object) ) {					# ThingWorx log line parsed and usable for additional analysis
                        $log_key = substr("[$log_level] [$thread] [$object] $message", 0, $max_log_message_length);
                    } elsif( defined( $thread ) ) {
                        $log_key = substr("[$log_level] [$thread] $message", 0, $max_log_message_length);
                    } else {
                        $log_key = substr("[$log_level] $message", 0, $max_log_message_length);
                    }

                    if( $category_bucket =~ /-HL$/ ) {
                        $log_messages{highlight}{$log_key}{count}++;
                    } else {
                        $log_messages{plain}{$log_key}{count}++;
                    }
                }

                if( $is_access_log ) {
## STATISTICAL DATA CAPTURE ##
                    $log_analysis{$bucket}{count}++;
                    $log_analysis{$bucket}{duration} += $duration if $duration;
                    $log_analysis{$bucket}{bytes} += $bytes if $bytes;

                  #  printf "\033[0;35m[duration: %d] [bytes: %d]\033[0m\n", $duration, $bytes;
                   # printf "\033[0;35m[status: %s] [duration: %d] [bytes: %d]\033[0m\n", $category_bucket, $log_counts{$bucket}{duration}, $log_counts{$bucket}{bytes};
                  #  $| = 1; # Flush output
                }
            }
        }
        close $fh;
    }
    print "\r$colors{'bright-green'}Processing complete.$colors{'NC'}";
    print " " x ( $terminal_width - length( "Processing complete." ) );
    print "\n\n";

    return;
}

sub normalize_data_for_output {
    # Determine the maximum total log messages for any time window
    my $max_total_count = 0;

    # Go through all of the buckets between the earliest and latest times and ensure that they have empty data to print time buckets with no data
    unless( $omit_empty ) {
        my $start_bucket = int($output_timestamp_min / $bucket_size_seconds) * $bucket_size_seconds;
        for (my $bucket = $start_bucket; $bucket <= $output_timestamp_max; $bucket += $bucket_size_seconds) {
            $log_counts{$bucket}{'empty'}{'count'} = 0;
        }
    }

    # Example usage (to demonstrate the values):
#    foreach my $bucket (sort keys %log_counts) {
#        print "Bucket: $bucket, Empty Count: ", $log_counts{$bucket}{'empty'}{'count'}, "\n";
#    }

    foreach my $bucket (keys %log_counts) {
        my $total_count = 0;
        foreach my $category_bucket (keys %{$log_counts{$bucket}}) {
            $total_count += $log_counts{$bucket}{$category_bucket}{count};
        }
        $max_total_count = $total_count if $total_count > $max_total_count;
    }

    # Calculate the maximum length of log level titles and counts
    if( !$hide_values ) {
        foreach my $bucket (keys %log_counts) {
            my $bucket_legend_length = 0;
            foreach my $category_bucket (keys %{$log_counts{$bucket}}) {
                my $count = $log_counts{$bucket}{$category_bucket}{count};
                next unless $count > 0 && $category_bucket !~ /^empty$/; 			# don't include the empty bucket who's purpose is to normalize the buckets represented

                my $title_length = $category_bucket =~ /-HL$/ ? length(" $count ") : length("$category_bucket: $count ");
                $bucket_legend_length += $title_length;
            }
            $legend_length = $bucket_legend_length if $bucket_legend_length > $legend_length;
        }
    }

#print "Legend length: $legend_length\n";

    # Normalize counts to fit terminal width
    my $max_graph_width = $terminal_width - $legend_length - 2 - 4 - length( $output_timestamp_format );    # static values based on timestamp length, some white space, maybe a vertical line spacer
    $max_graph_width -= 4 if $print_milliseconds;								# remove 4 characters from the X size of graph to leave room for millisecond output
    foreach my $bucket (keys %log_counts) {
        foreach my $category_bucket (keys %{$log_counts{$bucket}}) {
            my $count = $log_counts{$bucket}{$category_bucket}{count};
            my $scaled_count = $max_total_count != 0 ? int(($count / $max_total_count) * $max_graph_width) : 0;
            $log_counts{$bucket}{$category_bucket}{scaled_count} = $scaled_count;
            $category_totals{$category_bucket} += $count;							# tally the totals for each category bucket
            $total_lines_included += $count;
            $total_lines_highlighted += $count if $category_bucket =~ /-HL$/;
        }

        $current_memory_usage = get_memory_usage();								# track maximum memory usage
        if ($current_memory_usage > $max_memory_usage) {
            $max_memory_usage = $current_memory_usage;
        }
    }
    return;
}

sub print_bar_graph {
    my $lines_printed = 0;
    if( $total_lines_included ) {
        foreach my $bucket (sort keys %log_counts) {
            my $bucket_time_str = strftime($output_timestamp_format, gmtime($bucket));
            $bucket_time_str .= sprintf ".%03d", ($bucket-int($bucket))*1000 if $print_milliseconds;
            print "$bucket_time_str ";
            my $log_details = "";
            my $legend_length_bucket = 0;
            foreach my $category_bucket (@log_levels) {
                if (exists $log_counts{$bucket}{$category_bucket}) {
                    my $count = $log_counts{$bucket}{$category_bucket}{count};
                    my $color = $colors{$category_bucket} // $colors{'NC'};
                    if( $category_bucket =~ /-HL$/ ) {
                        $log_details .= "${color}$count$colors{'NC'} ";
                        $legend_length_bucket += length("$count ");
                    } elsif( $count < 1 ) {					 # don't include the empty bucket who's purpose is to normalize the buckets represented
                        next;
                    } else {
                        $log_details .= "$color$category_bucket: $count$colors{'NC'} ";
                        $legend_length_bucket += length("$category_bucket: $count ");
                    }
                }
            }
            print $log_details unless $hide_values;
            my $padding = $legend_length - $legend_length_bucket;
            print " " x ($padding >= 0 ? $padding : 0);
            print "│ ";
            foreach my $category_bucket (@log_levels) {
                if (exists $log_counts{$bucket}{$category_bucket}) {
                    my $scaled_count = $log_counts{$bucket}{$category_bucket}{scaled_count};
                    my $color = $colors{$category_bucket} // $colors{'NC'};
     #               print "$color" . ('█' x $scaled_count) . "$colors{'NC'}";
                    # the following provides a mechanism for changing the look of the bars for access logs compared to other logs
                    print "$color" . ( $category_bucket =~ /^[12345]xx(-HL)?$/ ? $blocks{'I'} : $blocks{$default_chart_block} ) x $scaled_count . "$colors{'NC'}";
                }
            }
            
            print "\n";
    # BUG - if using pause, the summary table won't be paused as it isn't implementing the next line
            pause_for_keypress() if( $pause_output && $lines_printed++ > 1 && $lines_printed % ( $terminal_height - 1 ) == 0 );
        }
    } else {
        printf "Read $total_lines_read lines, however no lines matched any of the patterns within the timeframe.\n";
    }
    return;
}

sub access_log_stats {
	my( $bucket ) = @_;
	my( $pretty_duration, $pretty_avg_duration, $pretty_bytes );
        printf "%dms / %d s / %dMB", int( $log_analysis{$bucket}{duration} / $log_analysis{$bucket}{count} ), $log_analysis{$bucket}{duration} / 1000, int( $log_analysis{$bucket}{bytes} / 1024 / 1024 );
}


sub print_summary_table {
    my $category_column_width = 15;
    my $count_column_width = 10;
    my $table_format = "  %-${category_column_width}s %${count_column_width}d\n";

    ## START SUMMARY STATISTIC TABLE ##
    print "\n\n";
    print "  " . "─" x ( $category_column_width + $count_column_width + 1 ) . "\n";
    printf "  " . "%-${category_column_width}s %${count_column_width}s\n", "Category", "Total"; 
    print "  " . "─" x ( $category_column_width + $count_column_width + 1 ) . "\n";

    foreach my $category_bucket (@log_levels) {
        next unless $category_totals{$category_bucket};
	
        my ( $legend_title ) =  "$category_bucket:" . " " x ( 12 - length( $category_bucket ) );
        #print "$legend_title$category_totals{$category_bucket}\n"; 
        #printf "%-${category_column_width}s %${count_column_width}d\n", $category_bucket, $category_totals{$category_bucket}; 
        printf $table_format, $category_bucket, $category_totals{$category_bucket}; 

    }
    print "  " . "─" x ( $category_column_width + $count_column_width + 1 ) . "\n";
    printf $table_format, "HIGHLIGHTED", $total_lines_highlighted if defined $highlight_regex;
    printf $table_format, "LINES INCLUDED", $total_lines_included; 
    printf $table_format, "LINES READ", $total_lines_read; 
    printf "  " . "%-${category_column_width}s %${count_column_width}s\n", "PROCESSING TIME", format_time( $elapsed, 's', 'short' );
    printf "  " . "%-${category_column_width}s %${count_column_width}s\n", "MEMORY USED", format_bytes( $max_memory_usage, 'kB' );
    print "  " . "─" x ( $category_column_width + $count_column_width + 1 ) . "\n";
    print "\n";

    ## START MESSAGE SUMMARY ##

    foreach my $grouping ( qw( highlight plain ) ) {
        # Ensure the grouping exists and is a hash reference
        if (exists $log_messages{$grouping} && ref($log_messages{$grouping}) eq 'HASH') {
            my @top_keys = (sort { $log_messages{$grouping}{$b}{count} <=> $log_messages{$grouping}{$a}{count} } keys %{$log_messages{$grouping}})[0..($top_n_messages-1)];

            # Print the top messages
            foreach my $key (@top_keys) {
                if (defined $key && exists $log_messages{$grouping}{$key}) {
                    print "$log_messages{$grouping}{$key}{count} | $key\n";
                }
            }

            print "\n------\n";
        #} else {
        #    warn "Grouping '$grouping' does not exist or is not a hash reference.\n";
        }
    }

    return;
}


## MAIN ##

print_title();
adapt_to_terminal_settings(); 
adapt_to_command_line_options();
read_and_process_logs();
normalize_data_for_output();
$end_time = [gettimeofday];
$elapsed = tv_interval($start_time, $end_time);

print_bar_graph();
print_summary_table() unless $omit_summary;;


print "\n";
exit;
